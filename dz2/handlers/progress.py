import logging
from enum import Enum
from handlers.set_profile import users, users_lock
from handlers.set_profile import set_user_info, log_user_info, update_user
from handlers.norm import update_water_goal, update_calories_goal
from handlers.filters import float_pattern, int_pattern, char_pattern
from handlers.common import back_reply_markup
from api.food import get_food_info
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from telegram.ext import ConversationHandler
import re


logger = logging.getLogger(__name__)


class State(int, Enum):
    GRAMS = 0,


async def log_water(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user

    if not context.args or not (re.match(int_pattern, context.args[0]) or re.match(float_pattern, context.args[0])):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã (–≤ –º–ª)>',
        )
        return

    user_water = float(context.args[0])
    await log_user_info(user.id, 'logged_water', user_water)

    async with users_lock:
        user_data = users[user.id].copy()

    user_water_current = users[user.id]['logged_water']
    if 'completed' in users[user.id]:
        user_water_goal = await update_water_goal(user.id) + users[user.id]['extra_water']
        response_text = f'üí¶ –ó–∞—á—Ç–µ–Ω–æ {user_water} –º–ª, –≤—Å–µ–≥–æ {user_water_current} / {user_water_goal} –º–ª'
        if user_water_current >= user_water_goal:
            response_text += f'\n‚úÖ  –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!'
        else:
            response_text += f'\nüîú  –î–æ –Ω–æ—Ä–º—ã {user_water_goal - user_water_current} –º–ª'
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=response_text,
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'üí¶ –ó–∞—á—Ç–µ–Ω–æ {user_water} –º–ª, –≤—Å–µ–≥–æ {user_water_current} –º–ª'\
                 f'‚ö†Ô∏è –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ—Ä–º—ã –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /set_profile!',
        )


async def log_food(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user

    if not context.args:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>',
        )
        return

    user_food = await get_food_info(context.args[0])
    if user_food is None or user_food['name'] is None:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ "{context.args[0]}"',
        )
        return ConversationHandler.END

    calories = float(user_food['calories'])
    async with users_lock:
        users[user.id]['last_food_calories'] = calories

    await update.message.reply_text(
        f'üçå {user_food["name"]} ‚Äî {calories} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?',
        reply_markup=back_reply_markup('–≤–µ—Å'),
    )

    return State.GRAMS


async def log_food_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user

    async with users_lock:
        user_calories = (float(update.message.text) / 100) * users[user.id]['last_food_calories']

    await log_user_info(user.id, 'logged_calories', user_calories)

    async with users_lock:
        user_data = users[user.id].copy()

    user_calories_current = users[user.id]['logged_calories']
    if 'completed' in users[user.id]:
        user_calories_goal = await update_calories_goal(user.id)
        response_text = f'üç¥ –ó–∞—á—Ç–µ–Ω–æ {user_calories} –∫–∫–∞–ª, –≤—Å–µ–≥–æ {user_calories_current} / {user_calories_goal} –∫–∫–∞–ª'
        if user_calories_current >= user_calories_goal:
            response_text += f'\n‚úÖ  –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!'
        else:
            response_text += f'\nüîú  –î–æ –Ω–æ—Ä–º—ã {user_calories_goal - user_calories_current} –∫–∫–∞–ª'
        await update.message.reply_text(
            response_text,
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await update.message.reply_text(
            f'üç¥ –ó–∞—á—Ç–µ–Ω–æ {user_calories} –∫–∫–∞–ª, –≤—Å–µ–≥–æ {user_calories_current} –∫–∫–∞–ª\n'\
                 f'‚ö†Ô∏è –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ—Ä–º—ã –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /set_profile!',
            reply_markup=ReplyKeyboardRemove()
        )

    return ConversationHandler.END


async def invalid_grams(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–≤ –≥—Ä–∞–º–º–∞—Ö):',
        reply_markup=back_reply_markup('–≤–µ—Å'),
    )
    return State.GRAMS


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # user = update.message.from_user
    # await update.message.reply_text(
    #     '–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∑–∂–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /set_profile!',
    #     reply_markup=ReplyKeyboardRemove()
    # )
    return ConversationHandler.END


async def log_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user

    if len(context.args) != 2 or not (re.match(int_pattern, context.args[1]) or re.match(float_pattern, context.args[1])):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)>',
        )
        return

    train_type, train_time = context.args
    train_time = float(train_time)

    user_burned_calories = train_time * 10
    user_extra_water = (train_time / 30) * 200

    await log_user_info(user.id, 'burned_calories', user_burned_calories)
    await log_user_info(user.id, 'extra_water', user_extra_water)

    async with users_lock:
        user_data = users[user.id].copy()

    user_calories_current = users[user.id]['logged_calories']

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f'üèÉ‚Äç‚ôÇÔ∏è {train_type} {train_time} –º–∏–Ω—É—Ç ‚Äî {user_burned_calories} –∫–∫–∞–ª. '\
             f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {user_extra_water} –º–ª –≤–æ–¥—ã.',
    )


async def check_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        user = update.message.from_user
    else:
        user = update.callback_query.from_user

    await update_user(user.id)
    await update_water_goal(user.id)
    await update_calories_goal(user.id)

    async with users_lock:
        user_data = users[user.id].copy()

    completed = False
    if 'completed' in user_data:
        completed = True

    response_text = f'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n'\
                    f'üí¶ –í–æ–¥–∞:\n'\
                    f' - –í—ã–ø–∏—Ç–æ: {user_data["logged_water"]} –º–ª'
    if completed:
        response_text += f' –∏–∑ {user_data["water_goal"] + user_data["extra_water"]} –º–ª'
    response_text += '\n'
    if completed:
        water_diff = user_data["water_goal"] + user_data["extra_water"] - user_data["logged_water"]
        if water_diff > 0:
            response_text += f' - –û—Å—Ç–∞–ª–æ—Å—å: {water_diff} –º–ª\n'
        else:
            response_text += f' - ‚úÖ  –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n'

    response_text += \
                    f'\n'\
                    f'üç¥ –ö–∞–ª–æ—Ä–∏–∏:\n'\
                    f'- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user_data["logged_calories"]} –∫–∫–∞–ª'
    if completed:
        response_text += f' –∏–∑ {user_data["calories_goal"]} –∫–∫–∞–ª'
    response_text += '\n'
    response_text += \
                    f'- –°–æ–∂–∂–µ–Ω–æ: {user_data["burned_calories"]} –∫–∫–∞–ª\n'\
                    f'- –ë–∞–ª–∞–Ω—Å: {user_data["logged_calories"] - user_data["burned_calories"]} –∫–∫–∞–ª\n'

    if not completed:
        response_text += f'\n‚ö†Ô∏è –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ—Ä–º—ã –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /set_profile!'

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=response_text,
    )
